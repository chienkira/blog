<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chienkira full stack web developer</title>
    <link>https://chienkira.github.io/blog/posts/</link>
    <description>Recent content in Posts on Chienkira full stack web developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 17 Aug 2020 10:45:49 +0900</lastBuildDate>
    
	<atom:link href="https://chienkira.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kinh nghiệm chọn và mua xe oto cũ ở Nhật</title>
      <link>https://chienkira.github.io/blog/posts/mua-xe-oto-c%C5%A9-%E1%BB%9F-nh%E1%BA%ADt/</link>
      <pubDate>Mon, 17 Aug 2020 10:45:49 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/mua-xe-oto-c%C5%A9-%E1%BB%9F-nh%E1%BA%ADt/</guid>
      <description>Năm 2020 - năm chi tiêu, sau khi vay LOAN mua nhà, gia đình mình lại mới mua cả xe 😃 Dù chỉ là 1 chiếc xe đã qua sử dụng, nhỏ nhắn và giá trị cũng khiêm tốn thôi, nhưng đó là cả một quyết định rất đắn đo và cũng là một bước đi xa hơn của 2 vợ chồng. Trong quá trình chọn xe và mua, vợ mình giao cho mình hết, duy nhất buổi đi xem lần cuối và chốt hợp đồng thì bà xã mới lê mông đi cùng thôi :)) Mình thấy có khá nhiều thông tin đáng chia sẻ nên hi vọng bài viết này sẽ giúp ích cho những ai cũng đang có ý định &amp;ldquo;tậu trâu&amp;rdquo; nha!</description>
    </item>
    
    <item>
      <title>Better Logging Practice (Part 2)</title>
      <link>https://chienkira.github.io/blog/posts/better-logging-practice-part2/</link>
      <pubDate>Thu, 30 Jul 2020 10:00:38 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/better-logging-practice-part2/</guid>
      <description>Đại dịch covid-19 tiến hóa thành covid-20 và cả ở Nhật hay ở Việt Nam thì tình hình đều đang rất đáng lo ngại. Bên Nhật còn vài tháng nữa là lại vào mùa lạnh, mùa cúm infu nữa&amp;hellip; không biết sẽ ra sao. Thôi không đánh trống lảng nữa, lý do mãi mới viết nốt part 2 là do lười ham chơi thôi! 😄 🙏 Let&amp;rsquo;s get start!!</description>
    </item>
    
    <item>
      <title>Better Logging Practice (Part 1)</title>
      <link>https://chienkira.github.io/blog/posts/better-logging-practice/</link>
      <pubDate>Sun, 24 May 2020 13:17:39 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/better-logging-practice/</guid>
      <description>Ruby là một ngôn ngữ đẹp, gems lại giống những món trang sức vừa xứng tầm vừa sang chảnh của ả. Và cá nhân mình cảm nhận thấy gu của những dev làm việc với Ruby cũng ít nhiều ở một level khá ổn, mọi người khá &amp;ldquo;sạch sẽ&amp;rdquo; và &amp;ldquo;tinh tế&amp;rdquo; :)) ngay cả trong chuyện logging nhé! Qua bài này, xin giới thiệu 1 gem và 1 AWS tool hữu ích cho việc quản lý logs đến các thánh thần!</description>
    </item>
    
    <item>
      <title>Rails Single Table Inheritance and DRY Code (日本語)</title>
      <link>https://chienkira.github.io/blog/posts/rails-single-table-inheritance-and-dry-code/</link>
      <pubDate>Fri, 24 Jan 2020 14:46:24 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/rails-single-table-inheritance-and-dry-code/</guid>
      <description>STI（Single Table Inheritance/単一テーブル継承）をRailsでどう実装するかについて、情報をまとめて残したいと思います。
STIの概要  英語：Single Table Inheritance 日本語：単一テーブル継承  OOPプログラミングの世界でよく知られている「継承」技術の一つです。
共通項目、共通振る舞いを折り出してスーパークラスを作り、 非共通項目や振る舞いはそのスーパークラスの継承したサブクラスで定義するというやり方ですね。
こうすることで、コードの重複を防げます。メンテナンスもやりやすいコードになります。
データベースの設計にも適用しようというのがSTIです。 特に、モデル間の共通データがほとんどだが、振る舞いが異なる場合はSTIが一番適切です。
RailsでSTIを実装してみる 例のシステム  スマホを販売している会社がスマホのデータを管理したい スマホの種類は、iPhoneとAndroidの2種類がある 種類に関係なく、製造番号やメモリや画面サイズなどのデータが共通となる（→ STIに適切ヒントですね） なお、スマホの種類によって異なるアクションができるようにする必要がある。 例えば、スマホの最新OSバージョンチェック機能があるとして、  iPhoneの場合AppleのAPIを叩く必要がある、 対して、Androidの場合GoogleのAPIを叩かないといけない   Rails実装 何にも気にしないで作ると、iphone/androidそれぞれのテーブル、モデルを作成しますよね。 そして、共通のデータやメソッドもあるので、 似たような記述・コピペが増えそうな予感を感じますよね！
それを避ける為に、STIを適用してみしょう。 ↓の図をご覧ください。
一見どうということもないように見えますが、実は
 iPhoneとAndroidテーブルは存在しない 全てのスマホのデータが、smartphoneテーブル一つだけに保存される  スーパーテーブルを用意して、継承のサブテーブルを作成するということです。
データレベルでは、スマホのデータしか実在しませんが、 アプリケーションレベル（Rails上）では、スマホを継承したiPhoneとAndroidモデルが存在します。
Railsで実際に実装する 1. マイグレーションを作成 スマホのテーブルしか存在しないので、マイグレーションファイルは1個になります。
class CreateSmartphoneTables &amp;lt; ActiveRecord::Migration[5.2] def change create_table :smartphones do |t| t.string :type, null: false t.string :serial_no t.float :screen_size t.integer :memory t.timestamps null: false end end end ポイントは、typeカラムを必須で用意する必要があることです。 RailsにSTIを使っているよって伝えるためです。</description>
    </item>
    
    <item>
      <title>Memo about AWS ECS Fargate</title>
      <link>https://chienkira.github.io/blog/posts/ecs-fargate/</link>
      <pubDate>Thu, 09 Jan 2020 17:50:27 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/ecs-fargate/</guid>
      <description>Mới đầu năm 2020 nhưng lại có cơ hội được tham khảo một hệ thống xài docker container vào môi trường prod. Ở đây họ dùng ECS và Fargate của AWS. Mình vẽ lại sơ đồ cấu thành của nó lưu lại làm tham khảo và ôn tập lại ECS luôn.
Cấu thành của 1 hệ thống API dùng ECS Fargate ↓ Ảnh svg, có thể tải về và phóng to ra.</description>
    </item>
    
    <item>
      <title>Use Presigned Url to Secure Only Some Files Inside A Public S3 Bucket</title>
      <link>https://chienkira.github.io/blog/posts/use-presigned-url-to-secure-some-files-inside-public-bucket/</link>
      <pubDate>Fri, 03 Jan 2020 21:17:52 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/use-presigned-url-to-secure-some-files-inside-public-bucket/</guid>
      <description>Tết mải ăn quá đến cuối ngày mồng 3 mới mò lên khai phím được 😃. Để chào mừng năm 2020 rực rỡ 🎆, bài viết lần này mình muốn note lại chia sẻ cách đặt policy cho S3 bucket, để vừa public bucket lại vẫn bảo mật (yêu cầu presigned url để truy cập) cho một số file nhất định trong bucket nha! Ok let&amp;rsquo;s go!
Presigned URL là?</description>
    </item>
    
    <item>
      <title>How to integrate Softbank payment gateway (日本語)</title>
      <link>https://chienkira.github.io/blog/posts/guide-to-integrate-softbank-payment-service/</link>
      <pubDate>Sun, 08 Dec 2019 09:36:35 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/guide-to-integrate-softbank-payment-service/</guid>
      <description>この間、決済代行サービス（SoftBankペイメント）を案件に導入したので、実際に実装して分かったことをこの記事にまとめてシェアしたいと思います。
バックグラウンド  私はこれまで決済代行サービスとの連携を実装したことがありません。 この案件は、クレジットカード支払いに対応しなければなりません。今後キャリア決済も対応する可能性があります。 Railsで実装されたWebアプリケーションからの連携となります。  決済代行サービスとは  加盟店と各決済会社（カード会社やオンライ決済）の間に入り、多種の決済方法を対応してくれるサービスです。 決済代行サービスを使わない場合、どうなるか？  各決済会社と個別契約をしないといけない　→　審査が大変厳しくなってしまう、工数もかなり掛かってしまう 決済会社によって、入金サイクルや手数料率が異なるので、事務処理に大変手間が掛かってしまう カード情報保管など、加盟店側が行わなければならない為、セキュリティー面の対応のハドルは高い  上のような不便を解決するために、決済代行サービスが存在しています。  SoftBankペイメントについてのまとめ 1. 導入の大きな流れ  まずは、エントリーシートを記入してSoftBankペイメント（SBペイメント）へ提出する SB側が各決済会社への審査を行ってくれる 審査が通過したら、私たち（加盟店）の環境が構築される
※ キャリア決済の審査が遅い傾向にある為、各カード会社の審査がOKになったら、途中で環境構築が始められるそうです。急いでる方はSBの営業担当者へ依頼してください。 環境構築が終わり次第、試験と本番環境の接続情報がもらえる  連携時に必要な情報 管理画面のログイン情報  審査に時間はかかる為、基本的には「共用試験環境」を使って実装を先に進めてください！と営業担当者から案内される
※ 共用試験環境は、SBペイメントの導入を検討している人々がシェアして使う環境である。実装を確認する為に、使えるテストカード情報なども共有される。  2. システム接続方式 SBペイメントは以下の2つの接続方法を対応しています。
契約する時、どちらかしか選択できないという訳ではありません。API＋リンク両方使用することも可能です。
 リンク型：エンドユーザーをSBペイメントの画面に誘導して、決済させるというイメージ API型：加盟店の画面がSBペイメントのAPIを呼び出して決済処理を行うというイメージ  2.1 リンク型 SBペイメントが提供する決済手続きの各画面を利用する方式です。 決済処理が終わた後、任意の加盟店側のページに画面遷移されます。
2.2 API型 SBペイメントの画面を使わず、APIでサーバー間の連携を行う方式です。 決済画面全部が自由にカスタマイズできます。
2.3 リンク型とAPI型の比較    項目 リンク型 API型     決済画面のカスタマイズ プラス料金を出せば、デザインのカスタマイズはできるが、 リンク追加など出来ない内容もある 自由に   決済処理フロー 決済代行サービスの仕様に依存 自由に   開発容易度と工数 低 高   利用可能な決済手段の差 豊富 一部の決済手段はAPI型対応しない    3.</description>
    </item>
    
    <item>
      <title>Set up production environment for Rails app using Puma and Nginx</title>
      <link>https://chienkira.github.io/blog/posts/h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-c%C3%A0i-%C4%91%E1%BA%B7t-server-rails-puma-nginx/</link>
      <pubDate>Tue, 12 Nov 2019 15:24:47 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn-c%C3%A0i-%C4%91%E1%BA%B7t-server-rails-puma-nginx/</guid>
      <description>Puma là web server nhỏ gọn đi liền trong Rails giúp developer có thể bắt đầu code một cách nhanh nhất. Tuy nhiên mang nó làm web server thực sự để chạy trên môi trường production thì chưa ổn. Bài này mình muốn memo lại chia sẻ với các bạn các bước cài đặt server để ứng dụng Rails chạy ổn định trên môi trường production.
Prerequisite  OS môi trường là Amazon linux Database sử dụng là Postgres  System configuration Puma hoạt động như application server cho ứng dụng Rails, còn Nginx sẽ hoạt động với vai trò là reverse proxy - nhận request và chuyển response giữa client và Puma.</description>
    </item>
    
    <item>
      <title>Minimum Web App Terraform Skeleton (English)</title>
      <link>https://chienkira.github.io/blog/posts/minimum-web-app-terraform-skeleton/</link>
      <pubDate>Sun, 03 Nov 2019 16:56:11 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/minimum-web-app-terraform-skeleton/</guid>
      <description>I made a Skeleton for Terraform code. Basically I&amp;rsquo;m supposed to use it for future projects, but then just thought it might be useful for others so that want to share it with you. Also I tried to avoid having to copy and paste codes when deploye in multiple environments for same app. Hopefully, you will be able to reuse at least a part or an idea to help you with your work.</description>
    </item>
    
    <item>
      <title>Care about writing readable Ruby code?</title>
      <link>https://chienkira.github.io/blog/posts/code-ruby-c%E1%BB%A7a-b%E1%BA%A1n-%C4%91%C3%A3-d%E1%BB%85-%C4%91%E1%BB%8Dc-ch%C6%B0a/</link>
      <pubDate>Thu, 24 Oct 2019 09:52:45 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/code-ruby-c%E1%BB%A7a-b%E1%BA%A1n-%C4%91%C3%A3-d%E1%BB%85-%C4%91%E1%BB%8Dc-ch%C6%B0a/</guid>
      <description>Do you care about writing readable code? Bài này mình muốn giới thiệu tới các bạn vài mẹo mà thời gian gần đây mình mới học được, giúp cho code Ruby trông chuyên nghiệp, dễ đọc hơn. Đây đều là những tip mà cá nhân mình thấy rất hay nhưng lại không nhiều người biết đến hoặc áp dụng thực tế. Nếu bạn cũng có tips muốn chia sẻ, comment bên dưới nhé ↓↓↓ 😃</description>
    </item>
    
    <item>
      <title>Set up HTTPS-supported development environment for Rails app</title>
      <link>https://chienkira.github.io/blog/posts/https-cho-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-dev-rails/</link>
      <pubDate>Sun, 18 Aug 2019 21:47:30 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/https-cho-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-dev-rails/</guid>
      <description>Hướng dẫn cấu hình tạo môi trường dev rails hỗ trợ giao thức HTTPS hoàn chỉnh nhanh và đơn giản nhất. Https &amp;ldquo;hiểu đơn giản kiểu đà điểu&amp;rdquo; là giao thức được secured, không trần truồng và lộ liễu như http thông thường.
Tại sao cần HTTPS cho môi trường dev? Đúng rồi! Chắc sẽ có người thắc mắc vậy, &amp;ldquo;Ông dỗi hơi hay sao mà phải tạo môi trường dev hỗ trợ HTTPS, dev thì http là được rồi còn gì?</description>
    </item>
    
    <item>
      <title>Explain Mixin and How to use it with Python</title>
      <link>https://chienkira.github.io/blog/posts/%C3%B4n-t%E1%BA%ADp-l%E1%BA%A1i-mixin-c%C3%B9ng-v%E1%BB%9Bi-python/</link>
      <pubDate>Tue, 25 Jun 2019 10:25:00 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/%C3%B4n-t%E1%BA%ADp-l%E1%BA%A1i-mixin-c%C3%B9ng-v%E1%BB%9Bi-python/</guid>
      <description>Vì thường ưu tiên tốc độ, chỉ tập trung làm sao đạt được output mong muốn trong thời gian ngắn nhất, mà từ bao giờ mình đã quá quen với việc &amp;ldquo;tái sử dụng&amp;rdquo; vô tội vạ các mã code Google được. Dẫn đến ngày nọ, mình nhận ra mình hơi bị mất niềm tin vào chính bản thân. Để khắc phục điều này, mình quyết định lâu lâu sẽ ôn tập củng cố lại kiến thức lập trình cơ bản, nhất là những tính năng độc đáo có chất đặc thù một tí của từng ngôn ngữ.</description>
    </item>
    
    <item>
      <title>Terraform Module and DRY infra code for multiple environments</title>
      <link>https://chienkira.github.io/blog/posts/deploy-nhi%E1%BB%81u-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-v%E1%BB%9Bi-terraform/</link>
      <pubDate>Sat, 15 Jun 2019 10:28:15 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/deploy-nhi%E1%BB%81u-m%C3%B4i-tr%C6%B0%E1%BB%9Dng-v%E1%BB%9Bi-terraform/</guid>
      <description>Vào mùa mưa rồi, ngày cuối tuần bị nó hành cho suốt luôn. Vừa mưa còn vừa lạnh, ai nghĩ đây là mùa hè chứ!!. Tuy nhiên cũng nhờ thế mà nhớ đến cái sở thích 地味 này 😂 Trong bài viết này, mình muốn giới thiệu về module trong terraform, và cách sử dụng nó để deploy lên nhiều môi trường dev-stg-prod khác nhau.
TL;DR  Các lệnh của terraform mặc định chỉ xử lý các file *.</description>
    </item>
    
    <item>
      <title>Cool Biz - Trang Phục Công Sở Cho Ngày Hè</title>
      <link>https://chienkira.github.io/blog/posts/coolbiz-trang-ph%E1%BB%A5c-c%C3%B4ng-s%E1%BB%9F-cho-ng%C3%A0y-h%C3%A8/</link>
      <pubDate>Sat, 15 Jun 2019 09:35:23 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/coolbiz-trang-ph%E1%BB%A5c-c%C3%B4ng-s%E1%BB%9F-cho-ng%C3%A0y-h%C3%A8/</guid>
      <description>Cool Biz là quy định về trang phục công sở được đặt ra tại Nhật Bản nhằm tiết kiệm điện sau khi thảm họa động đất sóng thần ngày 11&amp;frasl;3 xảy ra. Bình thường các công ty Nhật rất chỉn chu về trang phục khi đi làm, đi gặp đối tác trong kinh doanh : mặc áo vest, thắt cà vạt. Tuy nhiên để tiết kiệm điện, nhà nước kêu gọi mọi người không cần cà vạt, không cần áo vest trong thời gian từ cuối mùa xuân đến đầu mùa thu, nhằm giảm lượng điện sử dụng cho máy lạnh.</description>
    </item>
    
    <item>
      <title>Basic knowledge about Kubernetes(日本語)</title>
      <link>https://chienkira.github.io/blog/posts/hi%E1%BB%83u-kh%C3%A1i-ni%E1%BB%87m-c%C6%A1-b%E1%BA%A3n-c%E1%BB%A7a-kubernetes/</link>
      <pubDate>Sat, 08 Jun 2019 11:12:01 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/hi%E1%BB%83u-kh%C3%A1i-ni%E1%BB%87m-c%C6%A1-b%E1%BA%A3n-c%E1%BB%A7a-kubernetes/</guid>
      <description> Kubernetesとは Dockerは開発環境として使うのがすごく便利ですが、本番環境で使うと色々な問題が考えられます。
 コンテナがもし死んだら直ちに検知してコンテナを再起動したりして回復しないといけない リクエストが大量になる時、スケールをしないといけない 複数コンテナがあるなら、ロードバランシングをしないといけない 等々  ↑の問題を解決してくれるのがKubernetesの役割です。
Kubernetes（K8s）はコンテナオーケストレーションシステムです。
 Googleが2014年に公開しました。 Googleの長きにわたるコンテナ運用の知見が詰まっているらしいです。 K8sのメイン機能としては、コンテナ化されたアプリケーションを以下のこと自動的に行うことです。  デプロイ コンテナ管理 スケール   イメージは、K8sがコンテナの管理をいい感じにやってくれるので、 私たちはただK8sに「こんな感じでシステムを運用して」と注文書（マニフェスト）を投げつけるだけです。 それ以外はK8sに任せて良いです。
Kubernetesの構成を理解 クラスター  クラスター本体  ノード  クラスターに属するマシンを表すオブジェクト クラスターには、Masterノード１個と複数Workerノードがある Workerノードは私たちが開発したアプリケーションの実行環境となる（コンテナ群の実行環境） Masterノードは、私たちの命令に従って、各Workerノードにコンテナをデプロイしたりして、いい感じに監視・維持してくれる Masterノードは１つ、Workerノードは複数がある  Pod  Workerノード上に生成されるオブジェクト K8sの最小デプロイ単位であり、スケールする時はPod単位で生成／破棄される Pod内にコンテナが１つ以上ある  ReplicaSet（RS）とDeployment  RS  同じ仕様のPodが指定した数だけ存在するよう生成・管理する 例えば、Podが死んだ時マニフェストで指定した数になるよう自動回復してくれる  Deployment  新しいバージョンのリリースを管理するための仕組み   Service  クラスター内外からのリクエストをPodにルーティングするオブジェクト 複数のPodに対するロードバランシングの役割を持つ  </description>
    </item>
    
    <item>
      <title>Dành Cho Những Ai Muốn Giảm Cân</title>
      <link>https://chienkira.github.io/blog/posts/d%C3%A0nh-cho-nh%E1%BB%AFng-ai-mu%E1%BB%91n-gi%E1%BA%A3m-c%C3%A2n/</link>
      <pubDate>Sun, 26 May 2019 22:19:42 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/d%C3%A0nh-cho-nh%E1%BB%AFng-ai-mu%E1%BB%91n-gi%E1%BA%A3m-c%C3%A2n/</guid>
      <description>Sau khi sinh em bé xong thì cân nặng của mình tăng khá nhiều so với thời con gái. Dù đã cố gắng cho con bú nhưng vẫn không thể giảm được là bao nhiêu. Vì thế mình bắt đầu tìm hiểu về giảm cân, và tổng hợp những gì mình tìm hiểu được ở đây, hy vọng giúp ích được cho mọi người phần nào.
Giảm cân là giảm cái gì ?</description>
    </item>
    
    <item>
      <title>Code Storage limit of AWS Lambda</title>
      <link>https://chienkira.github.io/blog/posts/gi%E1%BB%9Bi-h%E1%BA%A1n-code-storage-trong-aws-lambda/</link>
      <pubDate>Mon, 15 Apr 2019 17:37:58 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/gi%E1%BB%9Bi-h%E1%BA%A1n-code-storage-trong-aws-lambda/</guid>
      <description>Cọ xát thực tế mới ngộ ra được bản chất của cái limit code storage trong AWS lambda. Bài này muốn chia sẻ lại một chút kiến thức biết được với mọi người.
Bối cảnh Công ty đang làm service chủ yếu theo kiến trúc serverless, nên dùng tương đối nhiều AWS Lambda functions.
 Số lượng Lambda: 238 Code size của Lambda: average 20MB ~ max 50MB  Diễn biến Ngày đẹp trời nhận được thông báo CI job failed.</description>
    </item>
    
    <item>
      <title>Unpack with Python</title>
      <link>https://chienkira.github.io/blog/posts/th%E1%BB%A7-thu%E1%BA%ADt-unpack-trong-python/</link>
      <pubDate>Fri, 05 Apr 2019 10:38:57 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/th%E1%BB%A7-thu%E1%BA%ADt-unpack-trong-python/</guid>
      <description>Ký tự * ngoài là toán tử multiplication (phép nhân) và string replication ra, trong Python nó còn có một tác dụng khác khá xịn xò - unpack (một số người còn gọi là splat).
Ký hiệu * Unpack chỉ có thể áp dụng lên một object loại iterable, để áp dụng việc cần làm là đặt ký hiệu * lên liền ngay trước object đó.
 Ví dụ:</description>
    </item>
    
    <item>
      <title>Nhật Bản Thiên Đường Của Thực Phẩm Low Carb</title>
      <link>https://chienkira.github.io/blog/posts/nh%E1%BA%ADt-b%E1%BA%A3n-thi%C3%AAn-%C4%91%C6%B0%E1%BB%9Dng-c%E1%BB%A7a-th%E1%BB%B1c-ph%E1%BA%A9m-low-carb/</link>
      <pubDate>Sun, 24 Mar 2019 22:37:08 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/nh%E1%BA%ADt-b%E1%BA%A3n-thi%C3%AAn-%C4%91%C6%B0%E1%BB%9Dng-c%E1%BB%A7a-th%E1%BB%B1c-ph%E1%BA%A9m-low-carb/</guid>
      <description>NHẬT BẢN - THIÊN ĐƯỜNG CỦA THỰC PHẨM LOW-CARB Low-carb là chế độ ăn cắt giảm tinh bột đã quá quen thuộc với không ít bạn có ý muốn giảm cân. Carb ở đây là viết tắt của carbonhydrate, được cơ thể chúng ta hấp thụ qua các loại đồ ăn chứa tinh bột và đường. Ăn low-carb tức là giảm, thậm chí cắt tinh bột và đường trong khẩu phần ăn, nhưng có thể tăng lượng đạm và chất béo tùy thích.</description>
    </item>
    
    <item>
      <title>What is CI and how to set up CI using Circle CI service</title>
      <link>https://chienkira.github.io/blog/posts/%C3%A1p-d%E1%BB%A5ng-circle-ci/</link>
      <pubDate>Sat, 23 Mar 2019 21:40:43 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/%C3%A1p-d%E1%BB%A5ng-circle-ci/</guid>
      <description>Lúc đầu trang blog này mình định deploy bằng tay vì nó đơn giản, thao tác cũng chẳng có gì - chạy cái shell script xong trong nháy mắt thôi. Nhưng mà tuần này chưa có gì hay ho để viết nên mình quyết định cài đặt CI cho em nó rồi lấy ý để viết bài này giới thiệu về CI luôn.
Giới thiệu CI và Circle CI CI CI viết tắt của Continuous Integration (Tích hợp liên tục) Trong quy trình làm phần mềm, lỗi lầm lớn nhất có thể xảy ra không phải là khi developer code ra cái gì tởm lợm!</description>
    </item>
    
    <item>
      <title>Make your own CLI program with Python</title>
      <link>https://chienkira.github.io/blog/posts/t%E1%BB%B1-t%E1%BA%A1o-ch%C6%B0%C6%A1ng-tr%C3%ACnh-cli-c%E1%BB%A7a-ch%C3%ADnh-m%C3%ACnh-kh%C3%B4ng-%C4%91%E1%BB%A5ng-h%C3%A0ng/</link>
      <pubDate>Wed, 13 Mar 2019 23:04:57 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/t%E1%BB%B1-t%E1%BA%A1o-ch%C6%B0%C6%A1ng-tr%C3%ACnh-cli-c%E1%BB%A7a-ch%C3%ADnh-m%C3%ACnh-kh%C3%B4ng-%C4%91%E1%BB%A5ng-h%C3%A0ng/</guid>
      <description>Lập trình viên không sớm thì muộn cũng sẽ yêu cái máy tính không khác gì yêu vợ. Rồi ngày qua ngày tiếp xúc với cửa sổ dòng lệnh, mắt lập trình viên dần thấy quen và ưng cái giao diện command line (CLI) hơn cả GUI màu sắc 😂
CLI: command line interface
Đây là live action cái CLI mình đã làm thử ra. Mở đầu Từ vài năm trước, sau khi chuyển qua sử dụng Mac thì thói quen sử dụng command line của mình đã được cải thiện rõ rệt.</description>
    </item>
    
    <item>
      <title>Am Hiểu Blue Green Deployment Trong 5 Phút</title>
      <link>https://chienkira.github.io/blog/posts/am-hi%E1%BB%83u-blue-green-deployment-trong-5-ph%C3%BAt/</link>
      <pubDate>Wed, 06 Mar 2019 09:29:32 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/am-hi%E1%BB%83u-blue-green-deployment-trong-5-ph%C3%BAt/</guid>
      <description>Blue green deployment là cái khỉ ho gì? Nó có gì hay và có &amp;ldquo;ngon&amp;rdquo; không? Nếu bạn đang có câu hỏi tương tự trong đầu thì hãy thử đọc hết bài viết này nhé. Đây cũng là chia sẻ thực tế của mình sau khi được giao cho task thiết kế Blue green deployment áp dụng lên hệ thống trong công ty.
1. Giới thiệu Blue Green deployment ※ Từ giờ viết gọn là B/G deploy</description>
    </item>
    
    <item>
      <title>Review Các Dịch Vụ Thuê Xe Ở Nhật</title>
      <link>https://chienkira.github.io/blog/posts/c%C3%A1c-d%E1%BB%8Bch-v%E1%BB%A5-thu%C3%AA-xe-%E1%BB%9F-nh%E1%BA%ADt/</link>
      <pubDate>Sun, 03 Mar 2019 09:18:57 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/c%C3%A1c-d%E1%BB%8Bch-v%E1%BB%A5-thu%C3%AA-xe-%E1%BB%9F-nh%E1%BA%ADt/</guid>
      <description>Như đã giới thiệu ở bài viết trước [chia sẻ kinh nghiệm học lấy bằng lái xe ô tô], hôm nay mình sẽ viết về các dịch vụ thuê xe ô tô ở Nhật. Các bạn sau khi có bằng, không mua xe thì hãy tham khảo thử nhé!
Các loại dịch vụ thuê xe ở Nhật Hiện tại ở Nhật tồn tại 2 hình thức thuê xe chứ không phải là một.</description>
    </item>
    
    <item>
      <title>Bắt Đầu Viết Blog</title>
      <link>https://chienkira.github.io/blog/posts/b%E1%BA%AFt-%C4%91%E1%BA%A7u-vi%E1%BA%BFt-blog/</link>
      <pubDate>Thu, 28 Feb 2019 16:07:28 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/b%E1%BA%AFt-%C4%91%E1%BA%A7u-vi%E1%BA%BFt-blog/</guid>
      <description>Từ trước tới giờ mình luôn là người lười viết lách, ví dụ như hồi học cấp 3 mình vẫn nhớ những tiết kiểm tra môn văn, kiểu gì mình cũng viết rất mất thời gian mà bài văn lại ngắn cũn ngắn cỡn, chỉ khoảng 2 trang giấy trong khi bọn nó (nhất là mấy đứa con gái) chúng cứ phải tuôn ra hàng tràng dài đến nỗi cần xin cô thêm giấy @@.</description>
    </item>
    
    <item>
      <title>Kinh Nghiệm Xin Vào Nhà Trẻ Ở Nhật</title>
      <link>https://chienkira.github.io/blog/posts/kinh-nghi%E1%BB%87m-xin-v%C3%A0o-nh%C3%A0-tr%E1%BA%BB-%E1%BB%9F-nh%E1%BA%ADt/</link>
      <pubDate>Tue, 26 Feb 2019 21:10:31 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/kinh-nghi%E1%BB%87m-xin-v%C3%A0o-nh%C3%A0-tr%E1%BA%BB-%E1%BB%9F-nh%E1%BA%ADt/</guid>
      <description>Kể chuyện đi nộp hồ sơ xin vào nhà trẻ ở Nhật.
Hôm trước (1 tháng trước rồi mà lười viết quá) em đi nộp hồ sơ xin vào nhà trẻ cho con, mà thấy giống thi đại học, vui quá nên muốn chia sẻ với các anh chị cô bác.
bài viết ở thời điểm tháng 12&amp;frasl;2018
Các nhà trẻ, mẫu giáo ở Nhật đồng loạt nhập học kỳ tháng 4 (mùa anh đào) và nộp hồ sơ tháng 11 hàng năm.</description>
    </item>
    
    <item>
      <title>Học Bằng Lái Xe Oto Ở Nhật</title>
      <link>https://chienkira.github.io/blog/posts/h%E1%BB%8Dc-b%E1%BA%B1ng-l%C3%A1i-xe-oto-%E1%BB%9F-nh%E1%BA%ADt/</link>
      <pubDate>Sat, 23 Feb 2019 16:42:28 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/h%E1%BB%8Dc-b%E1%BA%B1ng-l%C3%A1i-xe-oto-%E1%BB%9F-nh%E1%BA%ADt/</guid>
      <description>Mình mới lấy xong bằng lái oto ở Nhật (thực ra là lấy được 1 tháng rồi 😄), nhận ra có nhiều thông tin hữu ích có thể chia sẻ với ai đó đang cũng có ý định học nên chờ gì nữa nhỉ viết bài này thôi.
↓↓↓ Ảnh khu vực học thực hành lái ở trong trường ↓↓↓    View this post on Instagram         A post shared by Kira Chien (@chienkira) on Jan 10, 2019 at 9:32pm PST</description>
    </item>
    
    <item>
      <title>Understand AWS Cloudfront (日本語)</title>
      <link>https://chienkira.github.io/blog/posts/t%E1%BA%A5t-t%E1%BA%A7n-t%E1%BA%ADt-v%E1%BB%81-cloudfront/</link>
      <pubDate>Thu, 21 Feb 2019 16:33:07 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/t%E1%BA%A5t-t%E1%BA%A7n-t%E1%BA%ADt-v%E1%BB%81-cloudfront/</guid>
      <description>CloudFrontとは  AWSが提供するCDN（コンテンツ配信サービス）である。 世界中に設置されているエッジサーバを利用し、ユーザの最寄りエッジサーバからキャッシュを送ることでユーザへ高速な配信を実現できるサービスである。  CloudFrontの設定 Distribution Settings（ディストリビューション設定） ディストリビューションはCloudFrontの配信設定の単位になるので、CloudFrontの使用にはまずディストリビューションを作成する必要がある。
ディストリビューション配信種類はWebとRTMPがある。 - Web: ウェブ配信専用（基本的にこちらの種類を使う） - RTMP: メディアのストリーミング配信専用
 Alternate Domain Names (CNAMEs) CloudFront によって割り当てられたドメイン名（例 https://hogehoge.cloudfront.net）の代わりに、使用したい代替ドメイン名（例 https://example.com）をここに指定する。
 SSL Certificate デフォルトのCloudFrontのSSL証明書を使用するか、独自SSL証明書（ACMで登録したもの）を選択する。
  Origin Settings（オリジンドメイン設定）  Origin Domain Name
オリジンドメインを選択する。 フロントエンドをS3バケットに格納した場合は、オリジンドメインにS3バケットを選択すると良い。
※オリジンドメインとは、コンテンツの提供元のことを表す。オリジンドメインには、AWSのリソース（S3バケットやELBやAWS MediaPackageエンドポイントや AWS MediaStoreContainerエンドポイント）か、もしくはそれ以外のリソース（どこかのウェブサーバのドメイン等）でも指定できる。
 Origin Path オリジン内のディレクトリからコンテンツが配信されるようにしたい場合は、オリジンパスを入力することで実現できる。 例えば、オリジンパスに/greenを入力した場合、ユーザーがブラウザでexample.com/index.htmlとリクエストすると、CloudFrontは s3bucket/green/index.html を返答する。
 Origin ID ディストリビューション内でこのオリジンをユニークで区別する為の文字列である。 オリジンドメインを入力したら、自動的に生成されるオリジンIDをそのまま使っても良い。
 Restrict Bucket Access CloudFrontのURLでしかS3バケット内のコンテンツがアクセスできないように制御をしたい場合、この設定をYESにする。 ユーザーがCloudFrontのURLでもS3バケットのURLでもアクセスできるようにしたい場合は、[No]にする。
 Origin Access Identity [Restrict Bucket Access] で [Yes] にした場合、オリジンアクセスアイデンティティが必要になる。 新しいアイデンティティを作成するか、既存のアイデンティティを使用するかを下の [Your Identities] 設定項目で選択する。</description>
    </item>
    
    <item>
      <title>&#34;Thông&#34; Mạng Cho Aws SAM Và Dynamodb Local (日本語)</title>
      <link>https://chienkira.github.io/blog/posts/th%C3%B4ng-m%E1%BA%A1ng-cho-aws-sam-v%C3%A0-dynamodb-local/</link>
      <pubDate>Wed, 13 Feb 2019 15:50:07 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/th%C3%B4ng-m%E1%BA%A1ng-cho-aws-sam-v%C3%A0-dynamodb-local/</guid>
      <description>Dynamodb localを使いローカルで開発時 SAM localのstart-apiやinvokeコマンドを使い、Lambda関数をローカルで実行する時は、
- Lambda関数がSAMのDockerコンテナ上で実行され - Dynamodb localが別のDockerコンテナ上で動く
そのため、Lambda関数がDynamodb localへアクセルできるように、 2つのDockerコンテナを同じネットワークに繋がせる必要があります。
対応方法は以下の通りです。
まずはDynamodb localのDockerセットアップ file: docker-compose.yml
services: dynamodb: container_name: dynamodb #重要：コンテナ名を指定 image: amazon/dynamodb-local networks: - aws_local_network #繋がるネットワークを指定 &amp;lt;省略&amp;gt; networks: aws_local_network: name: aws_local_network #重要：ネットワーク名を強制的に指定 そして、モデルのソースコードを以下のように修正
if os.environ.get(&amp;#39;AWS_SESSION_TOKEN&amp;#39;) is None: host = &amp;#34;http://dynamodb:8000&amp;#34; 　解説： AWS_SESSION_TOKEN 環境変数には、実際のAWS環境で実行する時にしか値がないので
ローカルで実行しているかどうなの判別に使えます。
また、http://dynamodb:8000のdynamodbはDynamodb localのコンテナ名です。
最後に、Lambda関数をローカルで実行する時 --docker-network aws_local_network を追加で指定
sam local start-api --docker-network aws_local_network
又は、sam local invoke HogeFunction -e event.json --docker-network aws_local_network</description>
    </item>
    
    <item>
      <title>Understand AWS API Gateway(日本語)</title>
      <link>https://chienkira.github.io/blog/posts/c%C6%A1-b%E1%BA%A3n-v%E1%BB%81-api-gateway/</link>
      <pubDate>Tue, 12 Feb 2019 15:45:04 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/c%C6%A1-b%E1%BA%A3n-v%E1%BB%81-api-gateway/</guid>
      <description>API GatewayとLambda間の処理フロー APIGatewayとLambda間の処理フローは以下の図の通りです。  クライアントからHTTPリクエストがきた時に、[Method request] がそのリクエストを受け取って認証などを行う API Gatewayは必要に応じて [Integration Request]を使い、リクエストのデータを変換してから、Lambdaに転送する ※ 変換されたデータがLambda関数のevent変数に入ります。 次にAPI Gatewayは [Integration Response] を使い、Lambdaから返ってきた戻り値（処理結果）をまたデータ変換をしてから、[Method Response] に転送 最後に、API Gatewayが [Method Response]にてクライアントに返信する  → Integration Request と Integration Responseのデータ変換に関しては、以下の2選択肢があります。
 ①AWSのLambda proxy integration（Lambda プロキシ統合）に任せるか ②データ変換に使われるマッピングテンプレートを自分で定義するか  Lambda proxy integration（Lambda プロキシ統合） AWSのLambda プロキシ統合の詳細説明 Lambda プロキシ統合を使用する場合、Lambda関数へのInputデータやLambda関数のOutputデータのフォーマットが決まってます。
Lambda 関数の入力形式 以下のようにHTTPリクエスト全体をLambda 関数のevent変数にマッピングされます。 よく使うのは：
 headers: リクエストのヘッダデータ httpMethod: リクエストのメソッド情報 pathParameters: GETリクエストのパスパラメータ 例）/hoge/{group}/{user}のようなリクエストの場合、pathParameters には、groupとuserが入ってきます。 queryStringParameters: GETリクエストのクエリパラメータ 例）/hoge/{user}?page=5のようなリクエストの場合、queryStringParameters には、pageが入ってきます。 body: POSTリクエストのPostデータ  { &amp;#34;resource&amp;#34;: &amp;#34;Resource path&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;Path parameter&amp;#34;, &amp;#34;httpMethod&amp;#34;: &amp;#34;Incoming request&amp;#39;s method name&amp;#34; &amp;#34;headers&amp;#34;: {String containing incoming request headers} &amp;#34;multiValueHeaders&amp;#34;: {List of strings containing incoming request headers} &amp;#34;queryStringParameters&amp;#34;: {query string parameters } &amp;#34;multiValueQueryStringParameters&amp;#34;: {List of query string parameters} &amp;#34;pathParameters&amp;#34;: {path parameters} &amp;#34;stageVariables&amp;#34;: {Applicable stage variables} &amp;#34;requestContext&amp;#34;: {Request context, including authorizer-returned key-value pairs} &amp;#34;body&amp;#34;: &amp;#34;A JSON string of the request payload.</description>
    </item>
    
    <item>
      <title>Tips Setting Pycharm IDE For Python Development (日本語)</title>
      <link>https://chienkira.github.io/blog/posts/tips-c%C3%A0i-%C4%91%E1%BA%B7t-pycharm-%C4%91%E1%BB%83-code-python/</link>
      <pubDate>Fri, 08 Feb 2019 15:49:01 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/tips-c%C3%A0i-%C4%91%E1%BA%B7t-pycharm-%C4%91%E1%BB%83-code-python/</guid>
      <description>PycharmのInterpreterの設定方法 python仮想環境を使い、開発する際にはPycharmがそのpython仮想環境を認識させる必要があります。
※ 認識させないと、Pycharmの方がインストールされているライブラリが分からずimportのエラーなどが出てしまいます。
 ① Python仮想環境の場所を確認
pipenvの場合はこのコマンドで確認できます。 pipenv --venv
output例： /Users/kira/.local/share/virtualenvs/project_name-Qr43IEm2
 ② Pycharmの方でプロジェクトのInterpreterを設定
 PycharmのPreferences画面を開く
 左側のメニューから「Project: プロジェクト名」=&amp;gt;「Project Interpreter」を選択
 Project Interpreterのドロップダウンから「Show All」を選択し、「+」の追加ボタンを押す
 左側のメニューから「System Interpreter」を選択し、「&amp;hellip;」ボタンをクリックして①で確認できたパスを指定
※ 注意：bin/pythonX.Xまで指定してください。   PycharmのSources Root設定方法 開発ソースコードがプロジェクトの直下にはなく、srcフォルダーなどの中に置かれる場合が多いです。
※ CodeUriが./srcで設定される場合が多いです。
例えば以下のようなファイル構成の場合
|--template.yaml |--src | |--app | | |--__init__.py | | |--common | | | |--__init__.py | | | |--helper.py | | |--handlers | | | |--__init__.py | | | |--purchase.py purchase.pyファイルでapp/common/helper.pyのモジュールなどをimportするところのfrom app.common.helper import some_helper にPycharmがエラーを表示します。</description>
    </item>
    
    <item>
      <title>Làm Cottage Cheese Cho Bé Ăn Dặm</title>
      <link>https://chienkira.github.io/blog/posts/l%C3%A0m-cottage-cheese-cho-b%C3%A9-%C4%83n-d%E1%BA%B7m/</link>
      <pubDate>Tue, 01 Jan 2019 22:07:58 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/l%C3%A0m-cottage-cheese-cho-b%C3%A9-%C4%83n-d%E1%BA%B7m/</guid>
      <description>Tự làm cottage cheese cho bé ăn dặm
Trẻ dưới 1t được khuyến khích không ăn thức ăn có nêm muối, nên sử dụng phô mai để nấu ăn cho bé cũng bị hạn chế, do phô mai có chứa muối. Nhưng các mẹ hoàn toàn có thể tự làm phô mai cottage cho bé từ 7 tháng tuổi trở lên, rất ngon bổ rẻ.
Em đã tự làm và bản thân ăn cũng thấy ngon.</description>
    </item>
    
  </channel>
</rss>