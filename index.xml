<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chienkira</title>
    <link>https://chienkira.github.io/blog/</link>
    <description>Recent content on Chienkira</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 08 Jun 2019 11:12:01 +0900</lastBuildDate>
    
	<atom:link href="https://chienkira.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hiểu Khái Niệm Cơ Bản Của Kubernetes(日本語)</title>
      <link>https://chienkira.github.io/blog/posts/hi%E1%BB%83u-kh%C3%A1i-ni%E1%BB%87m-c%C6%A1-b%E1%BA%A3n-c%E1%BB%A7a-kubernetes/</link>
      <pubDate>Sat, 08 Jun 2019 11:12:01 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/hi%E1%BB%83u-kh%C3%A1i-ni%E1%BB%87m-c%C6%A1-b%E1%BA%A3n-c%E1%BB%A7a-kubernetes/</guid>
      <description> Kubernetesとは Dockerは開発環境として使うのがすごく便利ですが、本番環境で使うと色々な問題が考えられます。
 コンテナがもし死んだら直ちに検知してコンテナを再起動したりして回復しないといけない リクエストが大量になる時、スケールをしないといけない 複数コンテナがあるなら、ロードバランシングをしないといけない 等々  ↑の問題を解決してくれるのがKubernetesの役割です。
Kubernetes（K8s）はコンテナオーケストレーションシステムです。
 Googleが2014年に公開しました。 Googleの長きにわたるコンテナ運用の知見が詰まっているらしいです。 K8sのメイン機能としては、コンテナ化されたアプリケーションを以下のこと自動的に行うことです。  デプロイ コンテナ管理 スケール   イメージは、K8sがコンテナの管理をいい感じにやってくれるので、 私たちはただK8sに「こんな感じでシステムを運用して」と注文書（マニフェスト）を投げつけるだけです。 それ以外はK8sに任せて良いです。
Kubernetesの構成を理解 クラスター  クラスター本体  ノード  クラスターに属するマシンを表すオブジェクト クラスターには、Masterノード１個と複数Workerノードがある Workerノードは私たちが開発したアプリケーションの実行環境となる（コンテナ群の実行環境） Masterノードは、私たちの命令に従って、各Workerノードにコンテナをデプロイしたりして、いい感じに監視・維持してくれる Masterノードは１つ、Workerノードは複数がある  Pod  Workerノード上に生成されるオブジェクト K8sの最小デプロイ単位であり、スケールする時はPod単位で生成／破棄される Pod内にコンテナが１つ以上ある  ReplicaSet（RS）とDeployment  RS  同じ仕様のPodが指定した数だけ存在するよう生成・管理する 例えば、Podが死んだ時マニフェストで指定した数になるよう自動回復してくれる  Deployment  新しいバージョンのリリースを管理するための仕組み   Service  クラスター内外からのリクエストをPodにルーティングするオブジェクト 複数のPodに対するロードバランシングの役割を持つ  </description>
    </item>
    
    <item>
      <title>Dành Cho Những Ai Muốn Giảm Cân</title>
      <link>https://chienkira.github.io/blog/posts/d%C3%A0nh-cho-nh%E1%BB%AFng-ai-mu%E1%BB%91n-gi%E1%BA%A3m-c%C3%A2n/</link>
      <pubDate>Sun, 26 May 2019 22:19:42 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/d%C3%A0nh-cho-nh%E1%BB%AFng-ai-mu%E1%BB%91n-gi%E1%BA%A3m-c%C3%A2n/</guid>
      <description>Sau khi sinh em bé xong thì cân nặng của mình tăng khá nhiều so với thời con gái. Dù đã cố gắng cho con bú nhưng vẫn không thể giảm được là bao nhiêu. Vì thế mình bắt đầu tìm hiểu về giảm cân, và tổng hợp những gì mình tìm hiểu được ở đây, hy vọng giúp ích được cho mọi người phần nào.
Giảm cân là giảm cái gì ?</description>
    </item>
    
    <item>
      <title>Giới Hạn Code Storage Trong Aws Lambda</title>
      <link>https://chienkira.github.io/blog/posts/gi%E1%BB%9Bi-h%E1%BA%A1n-code-storage-trong-aws-lambda/</link>
      <pubDate>Mon, 15 Apr 2019 17:37:58 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/gi%E1%BB%9Bi-h%E1%BA%A1n-code-storage-trong-aws-lambda/</guid>
      <description>Cọ xát thực tế mới ngộ ra được bản chất của cái limit code storage trong AWS lambda. Bài này muốn chia sẻ lại một chút kiến thức biết được với mọi người.
Bối cảnh Công ty đang làm service chủ yếu theo kiến trúc serverless, nên dùng tương đối nhiều AWS Lambda functions.
 Số lượng Lambda: 238 Code size của Lambda: average 20MB ~ max 50MB  Diễn biến Ngày đẹp trời nhận được thông báo CI job failed.</description>
    </item>
    
    <item>
      <title>Thủ Thuật Unpack Trong Python</title>
      <link>https://chienkira.github.io/blog/posts/th%E1%BB%A7-thu%E1%BA%ADt-unpack-trong-python/</link>
      <pubDate>Fri, 05 Apr 2019 10:38:57 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/th%E1%BB%A7-thu%E1%BA%ADt-unpack-trong-python/</guid>
      <description>Ký tự * ngoài là toán tử multiplication (phép nhân) và string replication ra, trong Python nó còn có một tác dụng khác khá xịn xò - unpack (một số người còn gọi là splat).
Ký hiệu * Unpack chỉ có thể áp dụng lên một object loại iterable, để áp dụng việc cần làm là đặt ký hiệu * lên liền ngay trước object đó.
 Ví dụ:</description>
    </item>
    
    <item>
      <title>Nhật Bản Thiên Đường Của Thực Phẩm Low Carb</title>
      <link>https://chienkira.github.io/blog/posts/nh%E1%BA%ADt-b%E1%BA%A3n-thi%C3%AAn-%C4%91%C6%B0%E1%BB%9Dng-c%E1%BB%A7a-th%E1%BB%B1c-ph%E1%BA%A9m-low-carb/</link>
      <pubDate>Sun, 24 Mar 2019 22:37:08 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/nh%E1%BA%ADt-b%E1%BA%A3n-thi%C3%AAn-%C4%91%C6%B0%E1%BB%9Dng-c%E1%BB%A7a-th%E1%BB%B1c-ph%E1%BA%A9m-low-carb/</guid>
      <description>NHẬT BẢN - THIÊN ĐƯỜNG CỦA THỰC PHẨM LOW-CARB Low-carb là chế độ ăn cắt giảm tinh bột đã quá quen thuộc với không ít bạn có ý muốn giảm cân. Carb ở đây là viết tắt của carbonhydrate, được cơ thể chúng ta hấp thụ qua các loại đồ ăn chứa tinh bột và đường. Ăn low-carb tức là giảm, thậm chí cắt tinh bột và đường trong khẩu phần ăn, nhưng có thể tăng lượng đạm và chất béo tùy thích.</description>
    </item>
    
    <item>
      <title>Giới thiệu CI và áp dụng thực tế tool Circle CI</title>
      <link>https://chienkira.github.io/blog/posts/%C3%A1p-d%E1%BB%A5ng-circle-ci/</link>
      <pubDate>Sat, 23 Mar 2019 21:40:43 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/%C3%A1p-d%E1%BB%A5ng-circle-ci/</guid>
      <description>Lúc đầu trang blog này mình định deploy bằng tay vì nó đơn giản, thao tác cũng chẳng có gì - chạy cái shell script xong trong nháy mắt thôi. Nhưng mà tuần này chưa có gì hay ho để viết nên mình quyết định cài đặt CI cho em nó rồi lấy ý để viết bài này giới thiệu về CI luôn.
Giới thiệu CI và Circle CI CI CI viết tắt của Continuous Integration (Tích hợp liên tục) Trong quy trình làm phần mềm, lỗi lầm lớn nhất có thể xảy ra không phải là khi developer code ra cái gì tởm lợm!</description>
    </item>
    
    <item>
      <title>Tự Tạo Chương Trình CLI Của Chính Mình Không Đụng Hàng</title>
      <link>https://chienkira.github.io/blog/posts/t%E1%BB%B1-t%E1%BA%A1o-ch%C6%B0%C6%A1ng-tr%C3%ACnh-cli-c%E1%BB%A7a-ch%C3%ADnh-m%C3%ACnh-kh%C3%B4ng-%C4%91%E1%BB%A5ng-h%C3%A0ng/</link>
      <pubDate>Wed, 13 Mar 2019 23:04:57 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/t%E1%BB%B1-t%E1%BA%A1o-ch%C6%B0%C6%A1ng-tr%C3%ACnh-cli-c%E1%BB%A7a-ch%C3%ADnh-m%C3%ACnh-kh%C3%B4ng-%C4%91%E1%BB%A5ng-h%C3%A0ng/</guid>
      <description>Lập trình viên không sớm thì muộn cũng sẽ yêu cái máy tính không khác gì yêu vợ. Rồi ngày qua ngày tiếp xúc với cửa sổ dòng lệnh, mắt lập trình viên dần thấy quen và ưng cái giao diện command line (CLI) hơn cả GUI màu sắc 😂
CLI: command line interface
Đây là live action cái CLI mình đã làm thử ra. Mở đầu Từ vài năm trước, sau khi chuyển qua sử dụng Mac thì thói quen sử dụng command line của mình đã được cải thiện rõ rệt.</description>
    </item>
    
    <item>
      <title>Am Hiểu Blue Green Deployment Trong 5 Phút</title>
      <link>https://chienkira.github.io/blog/posts/am-hi%E1%BB%83u-blue-green-deployment-trong-5-ph%C3%BAt/</link>
      <pubDate>Wed, 06 Mar 2019 09:29:32 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/am-hi%E1%BB%83u-blue-green-deployment-trong-5-ph%C3%BAt/</guid>
      <description>Blue green deployment là cái khỉ ho gì? Nó có gì hay và có &amp;ldquo;ngon&amp;rdquo; không? Nếu bạn đang có câu hỏi tương tự trong đầu thì hãy thử đọc hết bài viết này nhé. Đây cũng là chia sẻ thực tế của mình sau khi được giao cho task thiết kế Blue green deployment áp dụng lên hệ thống trong công ty.
1. Giới thiệu Blue Green deployment ※ Từ giờ viết gọn là B/G deploy</description>
    </item>
    
    <item>
      <title>Review Các Dịch Vụ Thuê Xe Ở Nhật</title>
      <link>https://chienkira.github.io/blog/posts/c%C3%A1c-d%E1%BB%8Bch-v%E1%BB%A5-thu%C3%AA-xe-%E1%BB%9F-nh%E1%BA%ADt/</link>
      <pubDate>Sun, 03 Mar 2019 09:18:57 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/c%C3%A1c-d%E1%BB%8Bch-v%E1%BB%A5-thu%C3%AA-xe-%E1%BB%9F-nh%E1%BA%ADt/</guid>
      <description>Như đã giới thiệu ở bài viết trước [chia sẻ kinh nghiệm học lấy bằng lái xe ô tô], hôm nay mình sẽ viết về các dịch vụ thuê xe ô tô ở Nhật. Các bạn sau khi có bằng, không mua xe thì hãy tham khảo thử nhé!
Các loại dịch vụ thuê xe ở Nhật Hiện tại ở Nhật tồn tại 2 hình thức thuê xe chứ không phải là một.</description>
    </item>
    
    <item>
      <title>Bắt Đầu Viết Blog</title>
      <link>https://chienkira.github.io/blog/posts/b%E1%BA%AFt-%C4%91%E1%BA%A7u-vi%E1%BA%BFt-blog/</link>
      <pubDate>Thu, 28 Feb 2019 16:07:28 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/b%E1%BA%AFt-%C4%91%E1%BA%A7u-vi%E1%BA%BFt-blog/</guid>
      <description>Từ trước tới giờ mình luôn là người lười viết lách, ví dụ như hồi học cấp 3 mình vẫn nhớ những tiết kiểm tra môn văn, kiểu gì mình cũng viết rất mất thời gian mà bài văn lại ngắn cũn ngắn cỡn, chỉ khoảng 2 trang giấy trong khi bọn nó (nhất là mấy đứa con gái) chúng cứ phải tuôn ra hàng tràng dài đến nỗi cần xin cô thêm giấy @@.</description>
    </item>
    
    <item>
      <title>Kinh Nghiệm Xin Vào Nhà Trẻ Ở Nhật</title>
      <link>https://chienkira.github.io/blog/posts/kinh-nghi%E1%BB%87m-xin-v%C3%A0o-nh%C3%A0-tr%E1%BA%BB-%E1%BB%9F-nh%E1%BA%ADt/</link>
      <pubDate>Tue, 26 Feb 2019 21:10:31 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/kinh-nghi%E1%BB%87m-xin-v%C3%A0o-nh%C3%A0-tr%E1%BA%BB-%E1%BB%9F-nh%E1%BA%ADt/</guid>
      <description>Kể chuyện đi nộp hồ sơ xin vào nhà trẻ ở Nhật.
Hôm trước (1 tháng trước rồi mà lười viết quá) em đi nộp hồ sơ xin vào nhà trẻ cho con, mà thấy giống thi đại học, vui quá nên muốn chia sẻ với các anh chị cô bác.
bài viết ở thời điểm tháng 12&amp;frasl;2018
Các nhà trẻ, mẫu giáo ở Nhật đồng loạt nhập học kỳ tháng 4 (mùa anh đào) và nộp hồ sơ tháng 11 hàng năm.</description>
    </item>
    
    <item>
      <title>Học Bằng Lái Xe Oto Ở Nhật</title>
      <link>https://chienkira.github.io/blog/posts/h%E1%BB%8Dc-b%E1%BA%B1ng-l%C3%A1i-xe-oto-%E1%BB%9F-nh%E1%BA%ADt/</link>
      <pubDate>Sat, 23 Feb 2019 16:42:28 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/h%E1%BB%8Dc-b%E1%BA%B1ng-l%C3%A1i-xe-oto-%E1%BB%9F-nh%E1%BA%ADt/</guid>
      <description>Mình mới lấy xong bằng lái oto ở Nhật (thực ra là lấy được 1 tháng rồi 😄), nhận ra có nhiều thông tin hữu ích có thể chia sẻ với ai đó đang cũng có ý định học nên chờ gì nữa nhỉ viết bài này thôi.
↓↓↓ Ảnh khu vực học thực hành lái ở trong trường ↓↓↓    View this post on Instagram         A post shared by Kira Chien (@chienkira) on Jan 10, 2019 at 9:32pm PST</description>
    </item>
    
    <item>
      <title>Tất Tần Tật Về Cloudfront(日本語)</title>
      <link>https://chienkira.github.io/blog/posts/t%E1%BA%A5t-t%E1%BA%A7n-t%E1%BA%ADt-v%E1%BB%81-cloudfront/</link>
      <pubDate>Thu, 21 Feb 2019 16:33:07 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/t%E1%BA%A5t-t%E1%BA%A7n-t%E1%BA%ADt-v%E1%BB%81-cloudfront/</guid>
      <description>CloudFrontとは  AWSが提供するCDN（コンテンツ配信サービス）である。 世界中に設置されているエッジサーバを利用し、ユーザの最寄りエッジサーバからキャッシュを送ることでユーザへ高速な配信を実現できるサービスである。  CloudFrontの設定 Distribution Settings（ディストリビューション設定） ディストリビューションはCloudFrontの配信設定の単位になるので、CloudFrontの使用にはまずディストリビューションを作成する必要がある。
ディストリビューション配信種類はWebとRTMPがある。 - Web: ウェブ配信専用（基本的にこちらの種類を使う） - RTMP: メディアのストリーミング配信専用
 Alternate Domain Names (CNAMEs) CloudFront によって割り当てられたドメイン名（例 https://hogehoge.cloudfront.net）の代わりに、使用したい代替ドメイン名（例 https://example.com）をここに指定する。
 SSL Certificate デフォルトのCloudFrontのSSL証明書を使用するか、独自SSL証明書（ACMで登録したもの）を選択する。
  Origin Settings（オリジンドメイン設定）  Origin Domain Name
オリジンドメインを選択する。 フロントエンドをS3バケットに格納した場合は、オリジンドメインにS3バケットを選択すると良い。
※オリジンドメインとは、コンテンツの提供元のことを表す。オリジンドメインには、AWSのリソース（S3バケットやELBやAWS MediaPackageエンドポイントや AWS MediaStoreContainerエンドポイント）か、もしくはそれ以外のリソース（どこかのウェブサーバのドメイン等）でも指定できる。
 Origin Path オリジン内のディレクトリからコンテンツが配信されるようにしたい場合は、オリジンパスを入力することで実現できる。 例えば、オリジンパスに/greenを入力した場合、ユーザーがブラウザでexample.com/index.htmlとリクエストすると、CloudFrontは s3bucket/green/index.html を返答する。
 Origin ID ディストリビューション内でこのオリジンをユニークで区別する為の文字列である。 オリジンドメインを入力したら、自動的に生成されるオリジンIDをそのまま使っても良い。
 Restrict Bucket Access CloudFrontのURLでしかS3バケット内のコンテンツがアクセスできないように制御をしたい場合、この設定をYESにする。 ユーザーがCloudFrontのURLでもS3バケットのURLでもアクセスできるようにしたい場合は、[No]にする。
 Origin Access Identity [Restrict Bucket Access] で [Yes] にした場合、オリジンアクセスアイデンティティが必要になる。 新しいアイデンティティを作成するか、既存のアイデンティティを使用するかを下の [Your Identities] 設定項目で選択する。</description>
    </item>
    
    <item>
      <title>&#34;Thông&#34; Mạng Cho Aws SAM Và Dynamodb Local(日本語)</title>
      <link>https://chienkira.github.io/blog/posts/th%C3%B4ng-m%E1%BA%A1ng-cho-aws-sam-v%C3%A0-dynamodb-local/</link>
      <pubDate>Wed, 13 Feb 2019 15:50:07 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/th%C3%B4ng-m%E1%BA%A1ng-cho-aws-sam-v%C3%A0-dynamodb-local/</guid>
      <description>Dynamodb localを使いローカルで開発時 SAM localのstart-apiやinvokeコマンドを使い、Lambda関数をローカルで実行する時は、
- Lambda関数がSAMのDockerコンテナ上で実行され - Dynamodb localが別のDockerコンテナ上で動く
そのため、Lambda関数がDynamodb localへアクセルできるように、 2つのDockerコンテナを同じネットワークに繋がせる必要があります。
対応方法は以下の通りです。
まずはDynamodb localのDockerセットアップ file: docker-compose.yml
services: dynamodb: container_name: dynamodb #重要：コンテナ名を指定 image: amazon/dynamodb-local networks: - aws_local_network #繋がるネットワークを指定 &amp;lt;省略&amp;gt; networks: aws_local_network: name: aws_local_network #重要：ネットワーク名を強制的に指定 そして、モデルのソースコードを以下のように修正
if os.environ.get(&amp;#39;AWS_SESSION_TOKEN&amp;#39;) is None: host = &amp;#34;http://dynamodb:8000&amp;#34; 　解説： AWS_SESSION_TOKEN 環境変数には、実際のAWS環境で実行する時にしか値がないので
ローカルで実行しているかどうなの判別に使えます。
また、http://dynamodb:8000のdynamodbはDynamodb localのコンテナ名です。
最後に、Lambda関数をローカルで実行する時 --docker-network aws_local_network を追加で指定
sam local start-api --docker-network aws_local_network
又は、sam local invoke HogeFunction -e event.json --docker-network aws_local_network</description>
    </item>
    
    <item>
      <title>Tìm Hiểu Về Api Gateway(日本語)</title>
      <link>https://chienkira.github.io/blog/posts/c%C6%A1-b%E1%BA%A3n-v%E1%BB%81-api-gateway/</link>
      <pubDate>Tue, 12 Feb 2019 15:45:04 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/c%C6%A1-b%E1%BA%A3n-v%E1%BB%81-api-gateway/</guid>
      <description>API GatewayとLambda間の処理フロー APIGatewayとLambda間の処理フローは以下の図の通りです。  クライアントからHTTPリクエストがきた時に、[Method request] がそのリクエストを受け取って認証などを行う API Gatewayは必要に応じて [Integration Request]を使い、リクエストのデータを変換してから、Lambdaに転送する ※ 変換されたデータがLambda関数のevent変数に入ります。 次にAPI Gatewayは [Integration Response] を使い、Lambdaから返ってきた戻り値（処理結果）をまたデータ変換をしてから、[Method Response] に転送 最後に、API Gatewayが [Method Response]にてクライアントに返信する  → Integration Request と Integration Responseのデータ変換に関しては、以下の2選択肢があります。
 ①AWSのLambda proxy integration（Lambda プロキシ統合）に任せるか ②データ変換に使われるマッピングテンプレートを自分で定義するか  Lambda proxy integration（Lambda プロキシ統合） AWSのLambda プロキシ統合の詳細説明 Lambda プロキシ統合を使用する場合、Lambda関数へのInputデータやLambda関数のOutputデータのフォーマットが決まってます。
Lambda 関数の入力形式 以下のようにHTTPリクエスト全体をLambda 関数のevent変数にマッピングされます。 よく使うのは：
 headers: リクエストのヘッダデータ httpMethod: リクエストのメソッド情報 pathParameters: GETリクエストのパスパラメータ 例）/hoge/{group}/{user}のようなリクエストの場合、pathParameters には、groupとuserが入ってきます。 queryStringParameters: GETリクエストのクエリパラメータ 例）/hoge/{user}?page=5のようなリクエストの場合、queryStringParameters には、pageが入ってきます。 body: POSTリクエストのPostデータ  { &amp;#34;resource&amp;#34;: &amp;#34;Resource path&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;Path parameter&amp;#34;, &amp;#34;httpMethod&amp;#34;: &amp;#34;Incoming request&amp;#39;s method name&amp;#34; &amp;#34;headers&amp;#34;: {String containing incoming request headers} &amp;#34;multiValueHeaders&amp;#34;: {List of strings containing incoming request headers} &amp;#34;queryStringParameters&amp;#34;: {query string parameters } &amp;#34;multiValueQueryStringParameters&amp;#34;: {List of query string parameters} &amp;#34;pathParameters&amp;#34;: {path parameters} &amp;#34;stageVariables&amp;#34;: {Applicable stage variables} &amp;#34;requestContext&amp;#34;: {Request context, including authorizer-returned key-value pairs} &amp;#34;body&amp;#34;: &amp;#34;A JSON string of the request payload.</description>
    </item>
    
    <item>
      <title>Tips Cài Đặt Pycharm Để Code Python(日本語)</title>
      <link>https://chienkira.github.io/blog/posts/tips-c%C3%A0i-%C4%91%E1%BA%B7t-pycharm-%C4%91%E1%BB%83-code-python/</link>
      <pubDate>Fri, 08 Feb 2019 15:49:01 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/tips-c%C3%A0i-%C4%91%E1%BA%B7t-pycharm-%C4%91%E1%BB%83-code-python/</guid>
      <description>PycharmのInterpreterの設定方法 python仮想環境を使い、開発する際にはPycharmがそのpython仮想環境を認識させる必要があります。
※ 認識させないと、Pycharmの方がインストールされているライブラリが分からずimportのエラーなどが出てしまいます。
 ① Python仮想環境の場所を確認
pipenvの場合はこのコマンドで確認できます。 pipenv --venv
output例： /Users/kira/.local/share/virtualenvs/project_name-Qr43IEm2
 ② Pycharmの方でプロジェクトのInterpreterを設定
 PycharmのPreferences画面を開く
 左側のメニューから「Project: プロジェクト名」=&amp;gt;「Project Interpreter」を選択
 Project Interpreterのドロップダウンから「Show All」を選択し、「+」の追加ボタンを押す
 左側のメニューから「System Interpreter」を選択し、「&amp;hellip;」ボタンをクリックして①で確認できたパスを指定
※ 注意：bin/pythonX.Xまで指定してください。   PycharmのSources Root設定方法 開発ソースコードがプロジェクトの直下にはなく、srcフォルダーなどの中に置かれる場合が多いです。
※ CodeUriが./srcで設定される場合が多いです。
例えば以下のようなファイル構成の場合
|--template.yaml |--src | |--app | | |--__init__.py | | |--common | | | |--__init__.py | | | |--helper.py | | |--handlers | | | |--__init__.py | | | |--purchase.py purchase.pyファイルでapp/common/helper.pyのモジュールなどをimportするところのfrom app.common.helper import some_helper にPycharmがエラーを表示します。</description>
    </item>
    
    <item>
      <title>Làm Cottage Cheese Cho Bé Ăn Dặm</title>
      <link>https://chienkira.github.io/blog/posts/l%C3%A0m-cottage-cheese-cho-b%C3%A9-%C4%83n-d%E1%BA%B7m/</link>
      <pubDate>Tue, 01 Jan 2019 22:07:58 +0900</pubDate>
      
      <guid>https://chienkira.github.io/blog/posts/l%C3%A0m-cottage-cheese-cho-b%C3%A9-%C4%83n-d%E1%BA%B7m/</guid>
      <description>Tự làm cottage cheese cho bé ăn dặm
Trẻ dưới 1t được khuyến khích không ăn thức ăn có nêm muối, nên sử dụng phô mai để nấu ăn cho bé cũng bị hạn chế, do phô mai có chứa muối. Nhưng các mẹ hoàn toàn có thể tự làm phô mai cottage cho bé từ 7 tháng tuổi trở lên, rất ngon bổ rẻ.
Em đã tự làm và bản thân ăn cũng thấy ngon.</description>
    </item>
    
  </channel>
</rss>